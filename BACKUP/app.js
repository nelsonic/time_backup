// Generated by CoffeeScript 1.6.2
(function() {
  var CLIENT_ID, CLIENT_SECRET, ECT, MSG, OAuth2Client, PPL, REDIRECT_URL, app, ectRenderer, express, googleapis, io, models, mongoose, oauth2Client, port, scopes;

  express = require('express');

  app = express();

  port = 80;

  models = require('./models');

  mongoose = require('mongoose');

  MSG = mongoose.model('msg');

  PPL = mongoose.model('ppl');

  app.use(express["static"](__dirname + '/public'));

  app.set('views', __dirname + '/views');

  ECT = require('ect');

  ectRenderer = ECT({
    watch: true,
    root: __dirname + '/views'
  });

  app.engine('.html', ectRenderer.render);

  app.get('/', function(req, res) {
    return res.render('layout.html');
  });

  googleapis = require('googleapis');

  OAuth2Client = googleapis.OAuth2Client;

  CLIENT_ID = '998322373435.apps.googleusercontent.com';

  CLIENT_SECRET = 'U8QgUx2ygHzI-n5txUPMgcYV';

  REDIRECT_URL = 'http://localhost/oauth2callback';

  oauth2Client = new OAuth2Client(CLIENT_ID, CLIENT_SECRET, REDIRECT_URL);

  scopes = ['https://www.googleapis.com/auth/plus.login', 'https://www.googleapis.com/auth/userinfo.profile', 'https://www.googleapis.com/auth/userinfo.email'];

  app.get('/login', function(req, res) {
    googleapis.discover('oauth2', 'v2').execute(function(err, client) {
      var url;

      url = oauth2Client.generateAuthUrl({
        access_type: 'offline',
        scope: scopes.join(' ')
      });
      return res.send("<a href='" + url + "'>click to login</a>");
    });
    return console.dir(req.headers);
  });

  app.get('/oauth2callback', function(req, res) {
    var code;

    code = req.query.code;
    console.log("OAUth Response Code: " + code);
    res.send(code);
    return oauth2Client.getToken(code, function(err, tokens) {
      console.log(tokens);
      oauth2Client.credentials = tokens;
      return googleapis.discover('oauth2', 'v2').execute(function(err, client) {
        console.log(' - - - - - - - - - - - - ');
        console.log(client);
        console.log(' - - - - - - - - - - - - ');
        return client.oauth2.userinfo.get({
          email: 'email'
        }).withAuthClient(oauth2Client).execute(function(err, profile) {
          var person;

          if (err) {
            console.log('An error occurred');
            return console.dir(err);
          } else {
            console.log('Profile 1 :: ');
            person = new PPL({
              google_id: profile.id,
              email: profile.email,
              verified_email: profile.verified_email,
              name: profile.name,
              given_name: profile.given_name,
              family_name: profile.family_name,
              google_link: profile.link,
              picture: profile.picture,
              gender: profile.gender,
              locale: profile.locale,
              google_id_token: tokens.id_token,
              google_refresh_token: tokens.refresh_token,
              google_access_token: tokens.access_token,
              google_oauth_code: code
            });
            return person.save(function(err) {
              if (err) {
                return err;
              } else {
                return console.log("Person: " + person);
              }
            });
          }
        });
      });
    });
  });

  io = require('socket.io').listen(app.listen(port));

  io.sockets.on('connection', function(socket) {
    var clock, d;

    console.log('client connected ');
    console.log(socket.id);
    d = new Date();
    clock = d.toLocaleTimeString();
    socket.emit('message', {
      m: 'welcome to the chat ' + clock
    });
    return socket.on('send', function(data) {
      var msg;

      io.sockets.emit('message', data);
      console.log("Sent Data: ");
      console.dir(data);
      msg = new MSG({
        m: data.m,
        n: "Yash Kumar",
        t: new Date().getTime()
      });
      return msg.save(function(err) {
        if (err) {
          return err;
        } else {
          return console.log("Saved Message: " + msg);
        }
      });
    });
  });

  console.log("Listening on port " + port);

}).call(this);
